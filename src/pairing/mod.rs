pub mod mlkem;
pub mod ecies;

pub fn contact_message() -> (Vec<u8>, Vec<u8>) {
    let mut csprng = rand::rngs::OsRng;
    let (dk, ek) = mlkem::generate_encapsulation_key(&mut csprng);
    (dk, ek)
}

pub fn pairing_request_message(ek: impl AsRef<[u8]>) -> (Vec<u8>, Vec<u8>) {
    let mut csprng = rand::rngs::OsRng;
    let (ct, shared_key) = mlkem::encapsulate(&ek, &mut csprng);
    (ct, shared_key)
}

pub fn finish_pairing(dk: impl AsRef<[u8]>, ct: impl AsRef<[u8]>) -> Vec<u8> {
    mlkem::decapsulate(&dk, &ct)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_pairing() {
        // generated by Bob
        let (dk, ek) = contact_message();

        // generated by Alice
        let (ct, alice_shared_key) = pairing_request_message(&ek);

        // computed by Bob
        let bob_shared_key = finish_pairing(&dk, &ct);

        assert_eq!(alice_shared_key, bob_shared_key);
    }
}