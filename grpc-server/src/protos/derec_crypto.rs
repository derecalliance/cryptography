// This file is @generated by prost-build.
/// SIGN
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignGenerateSigningKeyRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignGenerateSigningKeyResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub private_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignSignRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub secret_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignSignResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignVerifyRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SignVerifyResponse {
    #[prost(bool, tag = "1")]
    pub valid: bool,
}
/// ENCRYPT
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EncryptGenerateEncryptionKeyRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptGenerateEncryptionKeyResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub private_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptEncryptRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptEncryptResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub ciphertext: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptDecryptRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub ciphertext: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub secret_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EncryptDecryptResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub message: ::prost::alloc::vec::Vec<u8>,
}
/// VSS - Shamir - Merkle Recovery
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SiblingHash {
    #[prost(bool, tag = "1")]
    pub is_left: bool,
    #[prost(bytes = "vec", tag = "2")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssShare {
    /// we use the x-coordinate to uniquely identify shares
    #[prost(bytes = "vec", tag = "1")]
    pub x: ::prost::alloc::vec::Vec<u8>,
    /// we use the y-coordinate as the share
    #[prost(bytes = "vec", tag = "2")]
    pub y: ::prost::alloc::vec::Vec<u8>,
    /// AES encryption of the secret message
    #[prost(bytes = "vec", tag = "3")]
    pub encrypted_secret: ::prost::alloc::vec::Vec<u8>,
    /// Merkle-root commitment to all shares
    #[prost(bytes = "vec", tag = "4")]
    pub commitment: ::prost::alloc::vec::Vec<u8>,
    /// bottom-up Merkle authentication path, bool denotes isLeft, while vec<u8> is the SHA-384 hash
    #[prost(message, repeated, tag = "5")]
    pub merkle_path: ::prost::alloc::vec::Vec<SiblingHash>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssShareRequest {
    #[prost(uint64, tag = "1")]
    pub t: u64,
    #[prost(uint64, tag = "2")]
    pub n: u64,
    #[prost(bytes = "vec", tag = "3")]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "4")]
    pub rand: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssShareResponse {
    /// List of key-value pairs
    #[prost(message, repeated, tag = "1")]
    pub shares: ::prost::alloc::vec::Vec<VssShare>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssRecoverRequest {
    /// List of key-value pairs
    #[prost(message, repeated, tag = "1")]
    pub shares: ::prost::alloc::vec::Vec<VssShare>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssRecoverResponse {
    /// List of key-value pairs
    #[prost(bytes = "vec", tag = "1")]
    pub message: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "RecoveryErrorType", tag = "2")]
    pub error_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VssDetectErrorRequest {
    /// List of key-value pairs
    #[prost(message, repeated, tag = "1")]
    pub shares: ::prost::alloc::vec::Vec<VssShare>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VssDetectErrorResponse {
    #[prost(enumeration = "RecoveryErrorType", tag = "1")]
    pub error_type: i32,
}
/// Enum to represent different types of recovery errors
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RecoveryErrorType {
    NoError = 0,
    InconsistentCiphertexts = 1,
    InconsistentCommitments = 2,
    CorruptShares = 3,
    InsufficientShares = 4,
}
impl RecoveryErrorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoError => "NO_ERROR",
            Self::InconsistentCiphertexts => "INCONSISTENT_CIPHERTEXTS",
            Self::InconsistentCommitments => "INCONSISTENT_COMMITMENTS",
            Self::CorruptShares => "CORRUPT_SHARES",
            Self::InsufficientShares => "INSUFFICIENT_SHARES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_ERROR" => Some(Self::NoError),
            "INCONSISTENT_CIPHERTEXTS" => Some(Self::InconsistentCiphertexts),
            "INCONSISTENT_COMMITMENTS" => Some(Self::InconsistentCommitments),
            "CORRUPT_SHARES" => Some(Self::CorruptShares),
            "INSUFFICIENT_SHARES" => Some(Self::InsufficientShares),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod de_rec_cryptography_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Define the gRPC service
    #[derive(Debug, Clone)]
    pub struct DeRecCryptographyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DeRecCryptographyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DeRecCryptographyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DeRecCryptographyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DeRecCryptographyServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// SIGN
        pub async fn sign_generate_signing_key(
            &mut self,
            request: impl tonic::IntoRequest<super::SignGenerateSigningKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignGenerateSigningKeyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/SignGenerateSigningKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "SignGenerateSigningKey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn sign_sign(
            &mut self,
            request: impl tonic::IntoRequest<super::SignSignRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignSignResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/SignSign",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("derec_crypto.DeRecCryptographyService", "SignSign"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn sign_verify(
            &mut self,
            request: impl tonic::IntoRequest<super::SignVerifyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignVerifyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/SignVerify",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "SignVerify",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ENCRYPT
        pub async fn encrypt_generate_encryption_key(
            &mut self,
            request: impl tonic::IntoRequest<super::EncryptGenerateEncryptionKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptGenerateEncryptionKeyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/EncryptGenerateEncryptionKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "EncryptGenerateEncryptionKey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn encrypt_encrypt(
            &mut self,
            request: impl tonic::IntoRequest<super::EncryptEncryptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptEncryptResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/EncryptEncrypt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "EncryptEncrypt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn encrypt_decrypt(
            &mut self,
            request: impl tonic::IntoRequest<super::EncryptDecryptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptDecryptResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/EncryptDecrypt",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "EncryptDecrypt",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// VSS - Shamir - Merkle Recovery
        pub async fn vss_share(
            &mut self,
            request: impl tonic::IntoRequest<super::VssShareRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssShareResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/VSSShare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("derec_crypto.DeRecCryptographyService", "VSSShare"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn vss_recover(
            &mut self,
            request: impl tonic::IntoRequest<super::VssRecoverRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssRecoverResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/VSSRecover",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "VSSRecover",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn vss_detect_error(
            &mut self,
            request: impl tonic::IntoRequest<super::VssDetectErrorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssDetectErrorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/derec_crypto.DeRecCryptographyService/VSSDetectError",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "derec_crypto.DeRecCryptographyService",
                        "VSSDetectError",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod de_rec_cryptography_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DeRecCryptographyServiceServer.
    #[async_trait]
    pub trait DeRecCryptographyService: std::marker::Send + std::marker::Sync + 'static {
        /// SIGN
        async fn sign_generate_signing_key(
            &self,
            request: tonic::Request<super::SignGenerateSigningKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignGenerateSigningKeyResponse>,
            tonic::Status,
        >;
        async fn sign_sign(
            &self,
            request: tonic::Request<super::SignSignRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignSignResponse>,
            tonic::Status,
        >;
        async fn sign_verify(
            &self,
            request: tonic::Request<super::SignVerifyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SignVerifyResponse>,
            tonic::Status,
        >;
        /// ENCRYPT
        async fn encrypt_generate_encryption_key(
            &self,
            request: tonic::Request<super::EncryptGenerateEncryptionKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptGenerateEncryptionKeyResponse>,
            tonic::Status,
        >;
        async fn encrypt_encrypt(
            &self,
            request: tonic::Request<super::EncryptEncryptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptEncryptResponse>,
            tonic::Status,
        >;
        async fn encrypt_decrypt(
            &self,
            request: tonic::Request<super::EncryptDecryptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EncryptDecryptResponse>,
            tonic::Status,
        >;
        /// VSS - Shamir - Merkle Recovery
        async fn vss_share(
            &self,
            request: tonic::Request<super::VssShareRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssShareResponse>,
            tonic::Status,
        >;
        async fn vss_recover(
            &self,
            request: tonic::Request<super::VssRecoverRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssRecoverResponse>,
            tonic::Status,
        >;
        async fn vss_detect_error(
            &self,
            request: tonic::Request<super::VssDetectErrorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VssDetectErrorResponse>,
            tonic::Status,
        >;
    }
    /// Define the gRPC service
    #[derive(Debug)]
    pub struct DeRecCryptographyServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DeRecCryptographyServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for DeRecCryptographyServiceServer<T>
    where
        T: DeRecCryptographyService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/derec_crypto.DeRecCryptographyService/SignGenerateSigningKey" => {
                    #[allow(non_camel_case_types)]
                    struct SignGenerateSigningKeySvc<T: DeRecCryptographyService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::SignGenerateSigningKeyRequest>
                    for SignGenerateSigningKeySvc<T> {
                        type Response = super::SignGenerateSigningKeyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignGenerateSigningKeyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::sign_generate_signing_key(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignGenerateSigningKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/SignSign" => {
                    #[allow(non_camel_case_types)]
                    struct SignSignSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::SignSignRequest>
                    for SignSignSvc<T> {
                        type Response = super::SignSignResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignSignRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::sign_sign(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignSignSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/SignVerify" => {
                    #[allow(non_camel_case_types)]
                    struct SignVerifySvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::SignVerifyRequest>
                    for SignVerifySvc<T> {
                        type Response = super::SignVerifyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignVerifyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::sign_verify(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SignVerifySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/EncryptGenerateEncryptionKey" => {
                    #[allow(non_camel_case_types)]
                    struct EncryptGenerateEncryptionKeySvc<T: DeRecCryptographyService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<
                        super::EncryptGenerateEncryptionKeyRequest,
                    > for EncryptGenerateEncryptionKeySvc<T> {
                        type Response = super::EncryptGenerateEncryptionKeyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::EncryptGenerateEncryptionKeyRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::encrypt_generate_encryption_key(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EncryptGenerateEncryptionKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/EncryptEncrypt" => {
                    #[allow(non_camel_case_types)]
                    struct EncryptEncryptSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::EncryptEncryptRequest>
                    for EncryptEncryptSvc<T> {
                        type Response = super::EncryptEncryptResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EncryptEncryptRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::encrypt_encrypt(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EncryptEncryptSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/EncryptDecrypt" => {
                    #[allow(non_camel_case_types)]
                    struct EncryptDecryptSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::EncryptDecryptRequest>
                    for EncryptDecryptSvc<T> {
                        type Response = super::EncryptDecryptResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EncryptDecryptRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::encrypt_decrypt(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EncryptDecryptSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/VSSShare" => {
                    #[allow(non_camel_case_types)]
                    struct VSSShareSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::VssShareRequest>
                    for VSSShareSvc<T> {
                        type Response = super::VssShareResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VssShareRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::vss_share(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VSSShareSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/VSSRecover" => {
                    #[allow(non_camel_case_types)]
                    struct VSSRecoverSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::VssRecoverRequest>
                    for VSSRecoverSvc<T> {
                        type Response = super::VssRecoverResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VssRecoverRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::vss_recover(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VSSRecoverSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/derec_crypto.DeRecCryptographyService/VSSDetectError" => {
                    #[allow(non_camel_case_types)]
                    struct VSSDetectErrorSvc<T: DeRecCryptographyService>(pub Arc<T>);
                    impl<
                        T: DeRecCryptographyService,
                    > tonic::server::UnaryService<super::VssDetectErrorRequest>
                    for VSSDetectErrorSvc<T> {
                        type Response = super::VssDetectErrorResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VssDetectErrorRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DeRecCryptographyService>::vss_detect_error(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VSSDetectErrorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DeRecCryptographyServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "derec_crypto.DeRecCryptographyService";
    impl<T> tonic::server::NamedService for DeRecCryptographyServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
